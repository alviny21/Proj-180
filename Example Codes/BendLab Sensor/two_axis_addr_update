#include "Arduino.h"
#include "ads_two_axis.h"
#include <Wire.h>

#define ADS_RESET_PIN       (15)         // Pin number attached to ads reset line.
#define ADS_INTERRUPT_PIN   (32)         // Pin number attached to the ads data ready line. 

uint8_t* scanI2CBus(uint8_t* deviceCount);

#define ADS_NEW_I2C_ADDR  0x15

static uint8_t device_count = 0;
static uint8_t* addresses;

void setup() {
  Serial.begin(115200);
  delay(2000);

  Wire.begin(22, 20);
  Serial.println("Checking I2C connection...");
  addresses = scanI2CBus(&device_count);
  Wire.end();

  //only work with 1 device at a time
  if(device_count > 1){
    Serial.println("Should only try to update I2C address with 1 sensor at a time");
    return;
  }

  ads_hal_update_device_addr(0, addresses[0]);
  ads_init_t init;
  init.sps = ADS_100_HZ;
  init.ads_sample_callback = NULL;
  init.reset_pin = ADS_RESET_PIN;                 // Pin connected to ADS reset line
  init.datardy_pin = ADS_INTERRUPT_PIN;           // Pin connected to ADS data ready interrupt

  // Initialize ADS hardware abstraction layer, and set the sample rate
  ads_hal_select_device(0);
  int ret_val = ads_two_axis_init(&init);

  ads_two_axis_update_device_address(0, ADS_NEW_I2C_ADDR);

  delay(500);

  Serial.println("Checking I2C connection...");
  addresses = scanI2CBus(&device_count);

}
void loop(){

}

uint8_t* scanI2CBus(uint8_t* deviceCount) {
  static uint8_t foundAddresses[127]; // Static array to store found addresses
  *deviceCount = 0; // Initialize device count to 0
  
  Serial.println("Scanning I2C bus...");
  
  for (byte address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    byte error = Wire.endTransmission();
    
    if (error == 0) {
      Serial.print("I2C device found at address 0x");
      if (address < 16) {
        Serial.print("0"); // Print leading zero for addresses < 0x10
      }
      Serial.println(address, HEX);
      
      // Store the address in our array
      foundAddresses[*deviceCount] = address;
      (*deviceCount)++;
    }
  }
  
  if (*deviceCount == 0) {
    Serial.println("No I2C devices found.");
  } else {
    Serial.print("Found ");
    Serial.print(*deviceCount);
    Serial.println(" I2C device(s)");
  }
  
  return foundAddresses;
}
